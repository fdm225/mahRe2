---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by david.
--- DateTime: 1/27/2023 6:00 AM
---

local lib = { }

function lib.new(History)
    local gui = {
        history = History,
        color = BLACK
    }

    function gui.reset(history)
        gui.history = history
    end

    function gui.getPercentColor(cpercent)
        -- This function returns green at 100%, red bellow 30% and graduate in between
        if cpercent < 30 then
            return lcd.RGB(0xff, 0, 0)
        else
            local g = math.floor(0xdf * cpercent / 100)
            local r = 0xdf - g
            return lcd.RGB(r, g, 0)
        end
    end

    function gui.getBlinkWhenZero(batRemPer)
        if batRemPer > 0 then
            -- Don't blink
            return 0
        end
        return BLINK
    end

    function gui.refreshZoneTiny(wgt, batRemainmAh, batRemPer)
        -- This size is for top bar wgts
        --- Zone size: 70x39 1/8th top bar
        local blinkWhenZero = gui.getBlinkWhenZero(batRemPer)
        local myString = string.format("%d", batRemainmAh)
        lcd.drawText(wgt.zone.x + wgt.zone.w - 25, wgt.zone.y + 5, batRemPer .. "%", RIGHT + SMLSIZE + CUSTOM_COLOR + blinkWhenZero)
        lcd.drawText(wgt.zone.x + wgt.zone.w - 25, wgt.zone.y + 20, myString, RIGHT + SMLSIZE + CUSTOM_COLOR + blinkWhenZero)
        -- draw batt
        lcd.drawRectangle(wgt.zone.x + 50, wgt.zone.y + 9, 16, 25, CUSTOM_COLOR, 2)
        lcd.drawFilledRectangle(wgt.zone.x + 50 + 4, wgt.zone.y + 7, 6, 3, CUSTOM_COLOR)
        local rect_h = math.floor(25 * batRemPer / 100)
        lcd.drawFilledRectangle(wgt.zone.x + 50, wgt.zone.y + 9 + 25 - rect_h, 16, rect_h, CUSTOM_COLOR + blinkWhenZero)
    end

    function gui.refreshZoneSmall(wgt, batRemainmAh, batRemPer)
        --- Size is 160x32 1/8th
        local myBatt = { ["x"] = 0, ["y"] = 0, ["w"] = 155, ["h"] = 35, ["segments_w"] = 25, ["color"] = WHITE, ["cath_w"] = 6, ["cath_h"] = 20 }
        local blinkWhenZero = gui.getBlinkWhenZero(batRemPer)

        -- draws bat
        lcd.setColor(CUSTOM_COLOR, WHITE)
        lcd.drawRectangle(wgt.zone.x + myBatt.x, wgt.zone.y + myBatt.y, myBatt.w, myBatt.h, CUSTOM_COLOR, 2)

        -- fill batt
        lcd.setColor(CUSTOM_COLOR, gui.getPercentColor(batRemPer))
        lcd.drawGauge(wgt.zone.x + 2, wgt.zone.y + 2, myBatt.w - 4, wgt.zone.h, batRemPer, 100, CUSTOM_COLOR)

        -- write text
        local topLine = string.format("%d      %d%%", batRemainmAh, batRemPer)
        lcd.drawText(wgt.zone.x + 20, wgt.zone.y + 2, topLine, MIDSIZE + CUSTOM_COLOR + blinkWhenZero)
    end

    function gui.refreshZoneMedium(wgt, batRemPer, batRemainmAh)
        --- Size is 225x98 1/4th  (no sliders/trim)
        gui.drawBattery(0, 0, wgt, batRemPer, batRemainmAh)
    end

    function gui.refreshZoneLarge(wgt, batRemainmAh, batRemPer)
        --- Size is 192x152 1/2
        local fontSize = 10
        local blinkWhenZero = gui.getBlinkWhenZero(batRemPer)

        lcd.drawText(wgt.zone.x + 5, wgt.zone.y + fontSize, "BATTERY LEFT", SHADOWED)
        lcd.setColor(CUSTOM_COLOR, gui.getPercentColor(batRemPer))
        lcd.drawText(wgt.zone.x + 5, wgt.zone.y + fontSize + 25, round(batRemPer) .. "%", DBLSIZE + SHADOWED + blinkWhenZero)
        lcd.drawText(wgt.zone.x + 5, wgt.zone.y + fontSize + 55, math.floor(batRemainmAh) .. "mAh", DBLSIZE + SHADOWED + blinkWhenZero)

        lcd.drawRectangle((wgt.zone.x - 1), (wgt.zone.y + (wgt.zone.h - 31)), (wgt.zone.w + 2), 32, 0)
        lcd.setColor(CUSTOM_COLOR, gui.getPercentColor(batRemPer))
        lcd.drawGauge(wgt.zone.x, (wgt.zone.y + (wgt.zone.h - 30)), wgt.zone.w, 30, batRemPer, 100, blinkWhenZero)
    end

    function gui.refreshZoneXLarge(wgt, batRemainmAh, batRemPer)
        --- Size is 390x172 1/1
        --- Size is 460x252 1/1 (no sliders/trim/topbar)
        local amps = 0
        local watts
        local sMaxWatts
        local voltsNow
        --local blinkWhenZero = gui.getBlinkWhenZero(batRemPer)
        -- Draw the top-left 1/4 of the screen
        gui.drawCellVoltage(wgt)

        -- Draw the bottom-left 1/4 of the screen
        gui.drawBattery(0, 100, wgt, batRemPer, batRemainmAh)

        -- Draw the top-right 1/4 of the screen
        lcd.drawText(wgt.zone.x + 210, wgt.zone.y + -5, "Current/Max", DBLSIZE + gui.color + SHADOWED)
        if gui.history.now and gui.history.now.amps then
            amps = gui.history.now.amps
        end

        --print("maxAmps:", history.maxAmps)
        if type(gui.history.maxAmps) == 'string' then
            lcd.drawText(wgt.zone.x + 210, wgt.zone.y + 30, string.format("%.0fA/%s", amps, gui.history.maxAmps), MIDSIZE + gui.color)
        else
            lcd.drawText(wgt.zone.x + 210, wgt.zone.y + 30, string.format("%.0fA/%.0fA", amps, gui.history.maxAmps), MIDSIZE + gui.color)
        end

        if gui.history then
            voltsNow = gui.history.getTotalVolts()
        else
            voltsNow = 0
        end

        watts = math.floor(amps * voltsNow)

        if type(gui.history.maxWatts) == "string" then
            sMaxWatts = gui.history.maxWatts
        elseif type(gui.history.maxWatts) == "number" then
            sMaxWatts = string.format("%.0f", gui.history.maxWatts)
        end
        lcd.drawText(wgt.zone.x + 210, wgt.zone.y + 55, string.format("%.0fW/%sW", watts, sMaxWatts), MIDSIZE + gui.color)

        -- Draw the bottom-right of the screen
        lcd.drawText(wgt.zone.x + 185, wgt.zone.y + 85, string.format("%.2fV", voltsNow), XXLSIZE + gui.color)
    end

    function gui.formatCellVoltage(voltage)
        local vColor
        if type(voltage) == "number" then
            vColor = gui.color
            if voltage < 3.7 then
                vColor = RED
            end
            return string.format("%.2f", voltage), vColor, 0
        else
            return "------", gui.color, 0
        end
    end

    function gui.drawCellVoltage(wgt)
        -- Draw the voltage table for the current/low cell voltages
        -- this should use ~1/4 screen
        local cell1, cell1Color, cell1Blink
        local history1, history1Color, history1Blink
        local cell2, cell2Color, cell2Blink
        local history2, history2Color, history2Blink

        local cellResult = {}
        if gui.history and gui.history.now and gui.history.now.voltage then
            cellResult = gui.history.now.voltage
        end

        for i = 1, 7, 2 do
            cell1, cell1Color, cell1Blink = gui.formatCellVoltage(cellResult[i], gui.color)
            history1, history1Color, history1Blink = gui.formatCellVoltage(gui.history.cellLowVoltage[i], gui.color)
            cell2, cell2Color, cell2Blink = gui.formatCellVoltage(cellResult[i + 1], gui.color)
            history2, history2Color, history2Blink = gui.formatCellVoltage(gui.history.cellLowVoltage[i + 1], gui.color)

            -- C1: C.cc/H.hh  C2: C.cc/H.hh
            lcd.drawText(wgt.zone.x, wgt.zone.y + 10 * (i - 1), string.format("C%d:", i), gui.color)
            lcd.drawText(wgt.zone.x + 25, wgt.zone.y + 10 * (i - 1), string.format("%s", cell1), cell1Color + cell1Blink)
            lcd.drawText(wgt.zone.x + 55, wgt.zone.y + 10 * (i - 1), string.format("/"), gui.color)
            lcd.drawText(wgt.zone.x + 60, wgt.zone.y + 10 * (i - 1), string.format("%s", history1), history1Color + history1Blink)

            lcd.drawText(wgt.zone.x + 100, wgt.zone.y + 10 * (i - 1), string.format("C%d:", i + 1), gui.color)
            lcd.drawText(wgt.zone.x + 125, wgt.zone.y + 10 * (i - 1), string.format("%s", cell2), cell2Color + cell2Blink)
            lcd.drawText(wgt.zone.x + 155, wgt.zone.y + 10 * (i - 1), string.format("/"), gui.color)
            lcd.drawText(wgt.zone.x + 160, wgt.zone.y + 10 * (i - 1), string.format("%s", history2), history2Color + history2Blink)
        end
    end

    function gui.drawBattery(xOrigin, yOrigin, wgt, batRemPer, batRemainmAh)
        local myBatt = { ["x"] = xOrigin,
                         ["y"] = yOrigin,
                         ["w"] = 85,
                         ["h"] = 35,
                         ["segments_w"] = 15,
                         ["color"] = WHITE,
                         ["cath_w"] = 6,
                         ["cath_h"] = 20 }

        local blinkWhenZero = gui.getBlinkWhenZero(batRemPer)

        -- fill batt
        lcd.setColor(CUSTOM_COLOR, gui.getPercentColor(batRemPer))
        lcd.drawGauge(wgt.zone.x + myBatt.x, wgt.zone.y + myBatt.y, myBatt.w,
                myBatt.h, batRemPer, 100, CUSTOM_COLOR)

        -- draws bat
        lcd.setColor(CUSTOM_COLOR, WHITE)
        lcd.drawRectangle(wgt.zone.x + myBatt.x, wgt.zone.y + myBatt.y, myBatt.w, myBatt.h, CUSTOM_COLOR, 2)
        lcd.drawFilledRectangle(wgt.zone.x + myBatt.x + myBatt.w,
        --wgt.zone.y + myBatt.h / 2 - myBatt.cath_h / 2,
                wgt.zone.y + myBatt.y + myBatt.cath_h / 2 - 2.5,
                myBatt.cath_w,
                myBatt.cath_h,
                CUSTOM_COLOR)
        lcd.drawText(wgt.zone.x + myBatt.x + 20, wgt.zone.y + myBatt.y + 5,
                string.format("%d%%", batRemPer), LEFT + MIDSIZE + CUSTOM_COLOR)

        -- draw values
        lcd.drawText(wgt.zone.x + myBatt.x, wgt.zone.y + myBatt.y + 35,
                string.format("%d mAh", batRemainmAh), DBLSIZE + gui.color + blinkWhenZero)
    end

    return gui
end

return lib